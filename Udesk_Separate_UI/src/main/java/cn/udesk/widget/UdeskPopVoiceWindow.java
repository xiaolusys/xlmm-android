package cn.udesk.widget;import android.content.Context;import android.content.res.Resources;import android.graphics.drawable.ColorDrawable;import android.os.Handler;import android.os.Message;import android.view.Gravity;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.ImageView;import android.widget.PopupWindow;import android.widget.PopupWindow.OnDismissListener;import android.widget.TextView;import cn.udesk.R;public class UdeskPopVoiceWindow extends PopupWindow  implements OnDismissListener {    public UdeskPopVoiceWindow(Context context,UdeskTimeEndCallback  callback ) {        super(context);        mContext = context;        mCallback= callback;        init(context);    }        private int videoTime = 0;         private void init(Context   context){        initResId(context);        setFocusable(false);         setTouchable(false);        setOutsideTouchable(false);         setBackgroundDrawable(new ColorDrawable(context.getResources().getColor(android.R.color.transparent)));    }   public void show(Context content,View locationView){       LayoutInflater layoutInflater=LayoutInflater.from(content);       ViewGroup rootView =(ViewGroup) layoutInflater.inflate(R.layout.udesk_im_record_popup, null);       setContentView(rootView);       mRecordHint = (TextView)rootView.findViewById(R.id.udesk_im_record_hint);       mIvState = (ImageView)rootView.findViewById(R.id.udesk_im_record_state);       mIvCancle = (ImageView)rootView.findViewById(R.id.udesk_im_record_cancle);       stateLinear = rootView.findViewById(R.id.udesk_record_linearLayout);       this.setOnDismissListener(this);              this.setWidth(WIDTH);       this.setHeight(HEIGHT);       videoTime = 0;       showAtLocation(locationView, Gravity.CENTER , 0,0);       mTimeHandler.sendEmptyMessage(HandleTypeTimeOver);    }          private void recycleResource(){        mTimeHandler.removeCallbacksAndMessages(null);        mCallback =null;        udeskHintRecording=null;        udeskHintCancel=null;        mTimeHandler=null;        mContext = null;        udeskHintTooShort = null;    }        public void readyToContinue(){        mRecordHint.setText(udeskHintRecording);        stateLinear.setVisibility(View.VISIBLE);        mIvCancle.setVisibility(View.GONE);        mIvState.setImageResource(ID_udesk_im_recording);        mAudioTipsImgId = ID_udesk_im_recording;    }        public void readyToCancelRecord(){        mRecordHint.setText(udeskHintCancel);        stateLinear.setVisibility(View.GONE);        mIvCancle.setVisibility(View.VISIBLE);        mIvCancle.setImageResource(ID_udesk_im_record_cancel);        mAudioTipsImgId = ID_udesk_im_record_cancel;    }        public void showTooShortHint(){        mRecordHint.setText(udeskHintTooShort);        stateLinear.setVisibility(View.GONE);        mIvCancle.setVisibility(View.VISIBLE);        mIvCancle.setImageResource(ID_udesk_im_record_too_short);        mAudioTipsImgId = ID_udesk_im_record_cancel;        mTimeHandler.sendEmptyMessageDelayed (HandleTypeShowTooShort,600);//展示给用户600毫秒    }        @Override    public void onDismiss() {        recycleResource();            }    private void initResId(Context context){                Resources res =  context.getResources();        WIDTH =res.getDimensionPixelOffset(R.dimen.udesk_im_record_popup_width);        HEIGHT =res.getDimensionPixelOffset(R.dimen.udesk_im_record_popup_height);        udeskHintRecording = res.getString(R.string.udesk_label_hint_recording);        udeskHintCancel = res.getString(R.string.udesk_label_hint_cancel);        udeskHintTooShort = res.getString(R.string.udesk_label_hint_too_short);                ID_udesk_im_record_cancel =R.drawable.udesk_im_record_cancel;        ID_udesk_im_record_too_short =R.drawable.udesk_im_record_too_short;        ID_udesk_im_recording =R.drawable.udesk_im_recording10;    }    private final int HandleTypeTimeOver = 0;    private final int HandleTypeShowTooShort = 1;    Handler mTimeHandler = new Handler(){        int time=60;        @Override        public void handleMessage(Message msg) {            switch (msg.what) {                case HandleTypeTimeOver:                    time--;                    videoTime ++ ;                    if(time==0){                        if(mCallback!=null){                            mCallback.onTimeOver();                        }                    }else{                        this.sendEmptyMessageDelayed(HandleTypeTimeOver, 1000);//1秒更新一次                    }                    break;                                    case HandleTypeShowTooShort:                    UdeskPopVoiceWindow.this.dismiss();                    break;                default:                    break;            }        }            };        private int WIDTH , HEIGHT;    private UdeskTimeEndCallback  mCallback;    private String udeskHintRecording;    private String udeskHintCancel;    private String udeskHintTooShort;    private TextView mRecordHint;    private ImageView mIvState;    private ImageView mIvCancle;    private View stateLinear;    private Context  mContext;            private int ID_udesk_im_record_cancel;    private int ID_udesk_im_record_too_short;    private int ID_udesk_im_recording;    private int mAudioTipsImgId = 0;        public void updateRecordStatus(int status){    	if(mAudioTipsImgId != ID_udesk_im_record_cancel &&     			mAudioTipsImgId != ID_udesk_im_record_too_short ){    		switch (status) {    		case 1:    			changePopupTips(R.drawable.udesk_im_recording2);    			break;    		case 2:    			changePopupTips(R.drawable.udesk_im_recording3);    			break;    		case 3:    			changePopupTips(R.drawable.udesk_im_recording4);    			break;    		case 4:    			changePopupTips(R.drawable.udesk_im_recording5);    			break;    		case 5:    			changePopupTips(R.drawable.udesk_im_recording6);    			break;    		case 6:    			changePopupTips(R.drawable.udesk_im_recording7);    			break;    		case 7:    			changePopupTips(R.drawable.udesk_im_recording8);    			break;    		case 8:    			changePopupTips(R.drawable.udesk_im_recording9);    			break;    		default:    			changePopupTips(R.drawable.udesk_im_recording10);    			break;    		}    	}    }        private void changePopupTips(int resid) {		if (resid != mAudioTipsImgId) {			mAudioTipsImgId = resid;			mIvState.setImageResource(resid);		}	}        public interface UdeskTimeEndCallback{         void onTimeOver();    }        public int getVideoTime(){    	return videoTime;    }}