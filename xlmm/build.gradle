apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'

def releaseTime() {
  return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}

def keyStore = file('../xlmm/xlmm.jks')


Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())


android {
  compileSdkVersion 23
  buildToolsVersion "23.0.3"

  defaultConfig {
    applicationId "com.jimei.xiaolumeimei"
    minSdkVersion 14

    targetSdkVersion 23

    versionCode 20160506
    versionName "1.1.0"

    multiDexEnabled = true

    //    ndk {
    //      //设置支持的SO库架构
    //      abiFilters 'armeabi', 'x86', 'armeabi-v7a', 'x86_64', 'arm64-v8a','mips'
    //    }
  }
  buildTypes {
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
  }


  sourceSets {
    main {
      java.srcDirs = ['src/main/java/']
      assets.srcDirs = ['src/main/assets', 'src/main/assets/']
      res.srcDirs = ['src/main/res', 'src/main/res/']
      manifest.srcFile 'src/main/AndroidManifest.xml'
      jniLibs.srcDirs = ['libs']
    }
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  lintOptions {
    checkReleaseBuilds false
  }

  dexOptions {
    javaMaxHeapSize "4g"
  }

  //签名配置
  signingConfigs {
    debug {
      storeFile file('../xlmm/xlmm.jks')
      storePassword 'xlmmxlmm'
      keyAlias 'xlmm'
      keyPassword 'xlmmxlmm'
      println("====== signingConfigs.debug ======")
    }
    release {
      storeFile file("../xlmm/xlmm.jks")
      storePassword 'xlmmxlmm'
      keyAlias 'xlmm'
      keyPassword 'xlmmxlmm'
      println("====== signingConfigs.release ======")
      println("properties.getProperty(\"storePassword\") = " + properties.getProperty(
          "storePassword"))
      println(
          "properties.getProperty(\"keyAlias\") = " + properties.getProperty("keyAlias"))
      println("properties.getProperty(\"keyPassword\") = " + properties.getProperty(
          "keyPassword"))
    }
  }

  buildTypes {
    debug {
      println("====== buildTypes.debug ======")
      signingConfig signingConfigs.debug
    }
    release {

      release {
        minifyEnabled false
        proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
      }

      println("====== buildTypes.release ======")
      //      开启或者关闭 混淆 。
      minifyEnabled false
      shrinkResources false
      proguardFiles file('proguard-rules.pro')
      if (keyStore.exists()) {
        println("xlmm -> buildTypes -> release: using jks key")
        signingConfig signingConfigs.release
      } else {
        println("xlmm -> buildTypes -> release: using default key")
      }
      applicationVariants.all { variant ->
        variant.outputs.each { output ->
          def outputFile = output.outputFile
          if (outputFile != null && outputFile.name.endsWith('.apk')) {
            // Xlmm_版本_yyyy-MM-dd_渠道.apk
            def fileName = "Xlmm_v${defaultConfig.versionName}_${releaseTime()}_${variant.productFlavors[0].name}.apk"
            println("====== buildTypes.output ======")
            println("AppName: " + fileName)
            output.outputFile = new File(outputFile.parent, fileName)
          } else {
          }
        }
      }
    }
  }

  //   渠道Flavors
  productFlavors {
    xlmm {
      manifestPlaceholders = [CHANNEL_NAME: "xlmm",
                              UMENG_APPKEY: "569f78a667e58ee15300094b"]
    }

    Fir {
      manifestPlaceholders = [CHANNEL_NAME: "Fir",
                              UMENG_APPKEY: "569f78a667e58ee15300094b"]
    }

    wandoujia {
      manifestPlaceholders = [CHANNEL_NAME: "wandoujia",
                              UMENG_APPKEY: "569f78a667e58ee15300094b"]
    }
    xiaomi {
      manifestPlaceholders = [CHANNEL_NAME: "xiaomi",
                              UMENG_APPKEY: "569f78a667e58ee15300094b"]
    }
    huawei {
      manifestPlaceholders = [CHANNEL_NAME: "huawei",
                              UMENG_APPKEY: "569f78a667e58ee15300094b"]
    }
    flyme {
      manifestPlaceholders = [CHANNEL_NAME: "flyme",
                              UMENG_APPKEY: "569f78a667e58ee15300094b"]
    }

    qihu360 {
      manifestPlaceholders = [CHANNEL_NAME: "qihu360",
                              UMENG_APPKEY: "569f78a667e58ee15300094b"]
    }

    tencent {
      manifestPlaceholders = [CHANNEL_NAME: "tencent",
                              UMENG_APPKEY: "569f78a667e58ee15300094b"]
    }
    assistant91 {
      manifestPlaceholders = [CHANNEL_NAME: "assistant91",
                              UMENG_APPKEY: "569f78a667e58ee15300094b"]
    }
    lenovo {
      manifestPlaceholders = [CHANNEL_NAME: "lenovo",
                              UMENG_APPKEY: "569f78a667e58ee15300094b"]
    }
    baidu {
      manifestPlaceholders = [CHANNEL_NAME: "baidu",
                              UMENG_APPKEY: "569f78a667e58ee15300094b"]
    }

    umeng {
      manifestPlaceholders = [CHANNEL_NAME: "umeng",
                              UMENG_APPKEY: "569f78a667e58ee15300094b"]
    }

  }
}


dependencies {
  compile fileTree(include: ['*.jar'], dir: 'libs')
  compile files('libs/alipaySDK-20150818.jar')
  compile files('libs/libammsdk.jar')
  compile files('libs/libpingpp-2.0.6.jar')
  compile files('libs/UPPayAssistEx.jar')
  compile files('libs/UPPayPluginEx.jar')
  compile files('libs/commons-lang3-3.4.jar')
  compile files('libs/ShareSDK-Core-2.6.6.jar')
  compile files('libs/ShareSDK-QQ-2.6.6.jar')
  compile files('libs/ShareSDK-QZone-2.6.6.jar')
  compile files('libs/ShareSDK-SinaWeibo-2.6.6.jar')
  compile files('libs/ShareSDK-Wechat-2.6.6.jar')
  compile files('libs/ShareSDK-Wechat-Core-2.6.6.jar')
  compile files('libs/ShareSDK-Wechat-Favorite-2.6.6.jar')
  compile files('libs/ShareSDK-Wechat-Moments-2.6.6.jar')
  compile files('libs/MiPush_SDK_Client_2_2_21.jar')
  compile files('libs/umeng-update-v2.6.0.1.jar')
  compile project(':xlmmlibrary')
}
