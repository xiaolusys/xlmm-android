apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'AndResGuard'

def releaseTime() {
    return new Date().format("yyyy_MM_dd", TimeZone.getTimeZone("UTC"))
}

def keyStore = file('../xlmm/xlmm.jks')


Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

andResGuard {
    mappingFile = null
    use7zip = true
    useSign = true
    keepRoot = false
    whiteList = [
            //your icon
            "R.mipmap.ic_launcher",
            //for fabric
            "R.string.com.crashlytics.*",
            //for umeng update
            "R.string.umeng*",
            "R.string.UM*",
            "R.string.tb_*",
            "R.string.ssdk*",
            "R.layout.umeng*",
            "R.layout.tb_*",
            "R.drawable.umeng*",
            "R.drawable.ssdk*",
            "R.drawable.img_update*",
            "R.drawable.update_*",
            "R.drawable.tb_*",
            "R.drawable.tb_*",
            "R.anim.umeng*",
            "R.color.umeng*",
            "R.color.tb_*",
            "R.color.tb_*",
            "R.style.*UM*",
            "R.style.umeng*",
            "R.id.umeng*",
            //umeng share for sina
            "R.drawable.sina*"
    ]
    compressFilePattern = [
            "*.png",
            "*.jpg",
            "*.jpeg",
            "*.gif",
            "resources.arsc"
    ]
    sevenzip {
        artifact = 'com.tencent.mm:SevenZip:1.1.9'
    }
}

android {
    compileSdkVersion 25
    buildToolsVersion '25.0.2'

    dataBinding {
        enabled = true
    }
    defaultConfig {
        applicationId "com.jimei.xiaolumeimei"
        minSdkVersion 15

        targetSdkVersion 25

        versionCode 20170330
        versionName "2.0.5"

        multiDexEnabled = true

        //    ndk {
        //      //设置支持的SO库架构
        //      abiFilters 'armeabi', 'x86', 'armeabi-v7a', 'x86_64', 'arm64-v8a','mips'
        //    }
    }

    sourceSets {
        main {
            java.srcDirs = ['src/main/java/']
            assets.srcDirs = ['src/main/assets', 'src/main/assets/']
            res.srcDirs = ['src/main/res', 'src/main/res/']
            manifest.srcFile 'src/main/AndroidManifest.xml'
            jniLibs.srcDirs = ['libs']
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        checkReleaseBuilds false
    }

    dexOptions {
        javaMaxHeapSize "4g"
    }

    //签名配置
    signingConfigs {
        debug {
            storeFile file('../xlmm/xlmm.jks')
            storePassword 'xlmmxlmm'
            keyAlias 'xlmm'
            keyPassword 'xlmmxlmm'
            println("====== signingConfigs.debug ======")
        }
        release {
            storeFile file("../xlmm/xlmm.jks")
            storePassword 'xlmmxlmm'
            keyAlias 'xlmm'
            keyPassword 'xlmmxlmm'
            println("====== signingConfigs.release ======")
            println("properties.getProperty(\"storePassword\") = " + properties.getProperty(
                    "storePassword"))
            println(
                    "properties.getProperty(\"keyAlias\") = " + properties.getProperty("keyAlias"))
            println("properties.getProperty(\"keyPassword\") = " + properties.getProperty(
                    "keyPassword"))
        }
    }

    buildTypes {
        debug {
            println("====== buildTypes.debug ======")
            debuggable true
            signingConfig signingConfigs.debug
        }
        release {
            minifyEnabled false
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            println("====== buildTypes.release ======")
            //      开启或者关闭 混淆 。
//      minifyEnabled true
//      shrinkResources true
            proguardFiles file('proguard-rules.pro')
            if (keyStore.exists()) {
                println("xlmm -> buildTypes -> release: using jks key")
                signingConfig signingConfigs.release
            } else {
                println("xlmm -> buildTypes -> release: using default key")
            }
            applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    def outputFile = output.outputFile
                    if (outputFile != null && outputFile.name.endsWith('.apk')) {
                        // Xlmm_版本_yyyy-MM-dd_渠道.apk
                        def fileName = "Xlmm_v${defaultConfig.versionName.replace(".", "")}_${releaseTime()}_${variant.productFlavors[0].name}.apk"
                        println("====== buildTypes.output ======")
                        println("AppName: " + fileName)
                        output.outputFile = new File(outputFile.parent, fileName)
                    } else {
                    }
                }
            }
        }
    }

    //   渠道Flavors
    productFlavors {
        xlmm {
            manifestPlaceholders = [CHANNEL_NAME: "xlmm",
                                    UMENG_APPKEY: "569f78a667e58ee15300094b"]
        }

//        Fir {
//            manifestPlaceholders = [CHANNEL_NAME: "Fir",
//                                    UMENG_APPKEY: "569f78a667e58ee15300094b"]
//        }
//
//
        xiaomi {
            manifestPlaceholders = [CHANNEL_NAME: "xiaomi",
                                    UMENG_APPKEY: "569f78a667e58ee15300094b"]
        }

        huawei {
            manifestPlaceholders = [CHANNEL_NAME: "huawei",
                                    UMENG_APPKEY: "569f78a667e58ee15300094b"]
        }

        qihu360 {
            manifestPlaceholders = [CHANNEL_NAME: "qihu360",
                                    UMENG_APPKEY: "569f78a667e58ee15300094b"]
        }

        tencent {
            manifestPlaceholders = [CHANNEL_NAME: "tencent",
                                    UMENG_APPKEY: "569f78a667e58ee15300094b"]
        }
        assistant91 {
            manifestPlaceholders = [CHANNEL_NAME: "assistant91",
                                    UMENG_APPKEY: "569f78a667e58ee15300094b"]
        }
        lenovo {
            manifestPlaceholders = [CHANNEL_NAME: "lenovo",
                                    UMENG_APPKEY: "569f78a667e58ee15300094b"]
        }
        baidu {
            manifestPlaceholders = [CHANNEL_NAME: "baidu",
                                    UMENG_APPKEY: "569f78a667e58ee15300094b"]
        }

        vivo {
            manifestPlaceholders = [CHANNEL_NAME: "vivo",
                                    UMENG_APPKEY: "569f78a667e58ee15300094b"]
        }
//        samsung {
//            manifestPlaceholders = [CHANNEL_NAME: "samsung",
//                                    UMENG_APPKEY: "569f78a667e58ee15300094b"]
//        }

    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

}


dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile files('libs/libammsdk.jar')
    compile files('libs/alipaySingle-20160825.jar')
    compile files('libs/commons-lang3-3.4.jar')
    compile files('libs/MiPush_SDK_Client_2_2_21.jar')
    compile project(':xlmmlibrary')
    compile project(':UdeskSDKUI')
    compile files('libs/MobCommons-2017.0216.1054.jar')
    compile files('libs/MobTools-2017.0216.1054.jar')
    compile files('libs/ShareSDK-Core-2.8.1.jar')
    compile files('libs/ShareSDK-QQ-2.8.1.jar')
    compile files('libs/ShareSDK-QZone-2.8.1.jar')
    compile files('libs/ShareSDK-SinaWeibo-2.8.1.jar')
    compile files('libs/ShareSDK-Wechat-2.8.1.jar')
    compile files('libs/ShareSDK-Wechat-Core-2.8.1.jar')
    compile files('libs/ShareSDK-Wechat-Moments-2.8.1.jar')
    testCompile 'org.mockito:mockito-all:2.0.2-beta'
    compile 'com.google.dagger:dagger:2.0.2'
    provided 'com.google.dagger:dagger-compiler:2.0.2'
    provided 'org.glassfish:javax.annotation:10.0-b28'
}
